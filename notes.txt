Build a proof of concept e-commerce store using Angular, .Net and Stripe for payment processing
-----------------------------------------------------------------------------------------------


Creating the project structure
------------------------------
dotnet -h
dotnet new list
dotnet new sln
dotnet new webapi -o API -controllers
dotnet new classlib -o Core
dotnet new classlib -o Infrastructure
dotnet sln add API
dotnet sln add Core
dotnet sln add Infrastructure
dotnet sln list
cd .\API\
dotnet add reference ..\Infrastructure\
cd ..\Infrastructure\
dotnet add reference ..\Core\
cd ../
dotnet restore
dotnet build


Configuring development launch settings
---------------------------------------
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5000;https://localhost:5001",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}


Remember watch doesn't work 100% well
-------------------------------------
dotnet watch
dotnet run


Adding nuget packages (vscode extension in terminal tab)
--------------------------------------------------------
Infrastructure	+ Microsoft.EntityFrameworkCore.SqlServer @Microsoft 8.0.6
API		+ Microsoft.EntityFrameworkCore.Design @Microsoft 8.0.6


Removing swagger
----------------
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();

var app = builder.Build();

// Configure the HTTP request pipeline.

app.MapControllers();

app.Run();


Creating a docker-compose.yml file to run mssql server
------------------------------------------------------
services:
  sql:
    image: mcr.microsoft.com/azure-sql-edge
    environment:
      ACCEPT_EULA: "1"
      MSSQL_SA_PASSWORD: "Password@1"
    ports:
      - "1433:1433"


Running the docker container
----------------------------
docker compose up -d


Adding the connection string to development launch settings
-----------------------------------------------------------
,
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost,1433;Database=skinet;User Id=SA;Password=Password@1;TrustServerCertificate=True"
  }


Installing entity framework migrations cli utility
--------------------------------------------------
https://www.nuget.org/packages/dotnet-ef
dotnet tool install --global dotnet-ef --version 8.0.6
dotnet ef


Managing migrations using entity framework cli
----------------------------------------------
dotnet ef migrations add InitialCreate -s API -p Infrastructure/
dotnet ef migrations remove -s API -p Infrastructure/
dotnet ef database update -s API -p Infrastructure
dotnet ef database drop -p Infrastructure -s API

Install the VSCode extension SQL Server by Microsoft.com
--------------------------------------------------------
Create new connection and use the connection string "Server=localhost,1433;Database=skinet;User Id=SA;Password=Password@1;TrustServerCertificate=True"


Postman is cool
---------------
Collections can hold variables for the {{url}} e.g. https://lcoalhost:5001
Requests can use the variables {{url}}/api/products
Body request variables are also available https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/
{
    "name": "{{$randomProduct}}",
    "description": "{{$randomLoremParagraph}}",
    "price": {{$randomPrice}},
    "pictureUrl": "{{$randomImageUrl}}",
    "type": "Some type",
    "brand": "Some brand",
    "quantityInStock": {{$randomInt}}
}


Source control
-------------------------------
dotnet new gitignore
VSCode > Source Control > [right-click-file] > Add to gitignore


Help!! I'm Stuck
----------------
Dont panic
Rule out the basics first
dotnet watch is really unreliable
Restart the server!
Reproduce the problem
Typos!
Version issues

Gather information
Check logs
Chrome dev tools
Debugger

Research
Search engine
AI (ChatGPT, CoPilot etc)
Compare with known working code
(https://github.com/trycatchlearn/)


Getting Help
------------
Be specific about the problem
Screenshots
Code snippets
What you have tried so far
What research you have done


Section 3
---------
Application architecture
The Repository Pattern
Seeding Data
Migrations and Startup

API
| | Controllers
  | Startup
| | Middleware
  |
| ⌄ 
  Infrastructure
| | | | Repository
  | | | DbContext
| | | | Services
  | | ⌄ 
| | | Stripe
  | ⌄
⌄ ⌄ Database
Core
  Entities
  Interfaces

The Repository Pattern - Goals
* Decouple business code from data access
* Separation of conerns
* Minimise duplicate query logic
* Testability

The Repository Pattern - Why we use it?
* Avoid messy controllers
* Simplified testing
* Increased abstraction
* Mainteainability
* Reduced duplicate code

The Reporsitory Pattern - Downsides
* Abstraction of an abstraction
* Optimisation challenges

The Repository Pattern
1. Inject repository interface into the controller
2. Gives us access to the GetProducts() or GetProduct(int id)
3. That's the method we call from the controller
4. From there that's where we do inject the DbContext and we can use _context.Products.ToList()
5. Our DbContext translates _context.Products.ToList() into SQL via the EntityFrameworkProvider
6. Data is returned back to our Repository > Controller > ApiController > Client who requested it
                                                  
                                                 (3)
                                +------------+   +---------------+       (6)
      +---------------------->> | Controller |   | GetProducts() |<<-------------+
      |                         +------------+   +---------------+               |
      |                                                  ⌄                       |
      |                      (4)                         ⌄                       |
    +-------------------+       +------------+   +----------------------------+  |
(1) | IRepository       |   +->>| Repository |   | _context.Products.ToList() |--+
    |                   |   |   +------------+   +----------------------------+
(2) | GetProducts()     |   |                            ⌄                   ^
    | GetProduct(int id)|   |                     (5)    ⌄                   ^
    +-------------------+   |                            ⌄                   |
                            |   +-----------+    +------------------------+  |
                            +---| DbContext |    | SELECT * FROM PRODUCTS |--+
                                +-----------+    +------------------------+


Seeding and Migrating on Startup
--------------------------------
try
{
    using var scope = app.Services.CreateScope();
    var services = scope.ServiceProvider;
    var context = services.GetRequiredService<StoreContext>();
    await context.Database.MigrateAsync();
    await StoreContextSeed.SeedAsync(context);
}
catch (System.Exception ex)
{
    Console.WriteLine(ex);
    throw;
}


The Specification Pattern
-------------------------

Generic repository is an anti-pattern!
* Why is it considered an anti-pattern?
  Answer? 
  1. Providing a generic expression exposes the entire dataset through a method which could cause incredibly inefficient queries. 
     The goal is the encapsulate not expose (leaky abstraction).
     The method is too generic.
public interface IRepository<T>
{
  IReadOnlyList<T> ListAllAsync();
  IReadOnlyList<T> FindAsync(Expression<Func<T, bool>> query);
  T GetByID(int id);                       ^
  void Add(T item);                        ^
  void Update(T item);                (1)  ^
  void Delete(T item);              +-----------------------------+
}                                   | Generic expression e.g.     |
                                    |                             |
                                    | x => x.Name.Contains("red") |
                                    +-----------------------------+

The spcification pattern to the rescue!
* Describes a query in an object
* Returns an IQueryable<T>
* Generic List method takes specification as parameter
* Specification can have meaningful name
  * OrdersWithItemsAndSortingSpecification

Overview
1. Specification passed as parameter to ListAsync
2. Passes the spec to an Evaluator class to build up an expression tree
3. Returns an IQueryable of type T that the async method can use to query the database
+---------------------+
| Specification Class |
|                     |             Generic Repository
| I need all products |  (1)   +--------------------------+
| that have a brand   |------>>| ListAsync(specification) | 
| of 'react' and are  |        +--------------------------+
| a type of 'gloves'  |          (2)   ^         ^ (3)
+---------------------+         spec   ^         ^ IQueryable<T>
                                       ^         ^
                                   +-----------------+
                                   | Evaluator Class |
                                   +-----------------+



